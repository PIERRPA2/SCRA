<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_novrp_cr.CodeReviewUtil</api_name>
        <client_callable>false</client_callable>
        <description>The script include contains all methods necessary to manage code review request</description>
        <name>CodeReviewUtil</name>
        <script><![CDATA[var CodeReviewUtil = Class.create();
CodeReviewUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	scope: 'x_novrp_cr',
	result: {"success": false, "data": null, "message": ""},
	filterClass: "",
	
	initialize: function(){
		var rule = new GlideAggregate("x_novrp_cr_rule");
		rule.addAggregate("COUNT", "table");
		rule.query();

		while(rule.next()){
			this.filterClass += rule.table;
		}
	},
	
	requestCustomReview: function(review){
		try{
			if(review == undefined){
				this.result.success = false;
				this.result.message = "Please specify an application or an update set";

				return new global.JSON().encode(this.result);
			}
			
			var applications = review.applications;
			var relatedRecord = null;
			
			if(applications != ""){
				var query = "sys_scope.sys_idIN" + applications +
							"^sys_class_name!=sys_metadata_delete";
				
				var file = new GlideRecord("sys_metadata");
				file.addEncodedQuery("sys_scope.sys_idIN" + applications +
									 "^sys_class_name!=sys_metadata_delete");
				file.query();

				while(file.next()){
					this._refreshFindings(review, file.sys_update_name, null);
				}
			}
			
			var updateSets = review.update_sets;
			
			if(updateSets != ""){
				var update = new GlideRecord("sys_update_xml");
				update.addEncodedQuery("update_set.sys_idIN" + updateSets);
				update.query();

				while(update.next()){
					this._refreshFindings(review, update.name, update.update_set.name);
				}
			}
			
			action.setRedirectURL("x_novrp_cr_custom_review.do?sys_id=" + review.sys_id);
			
			this.result.success = true;
			return new global.JSON().encode(this.result);
		}catch(exception){
			gs.error("requestCodeReview: " + exception);
			this.result.message = "An unexpected error occured. Please try again.";
			return new global.JSON().encode(this.result);
		}
	},
	
	_refreshFindings: function(review, filename, updateSet){
		try{
			var file = this._getRelatedRecord(filename);
			
			if(file == null){
				return null;
			}
			
			if(!file.active && !review.include_inactive_record){
				return null;
			}
			
// 			if(this.filterClass.indexOf(file.sys_class_name) == -1){
// 				return null;
// 			}

			var change = new GlideRecordSecure(this.scope + "_change");
			change.addQuery("custom_review", review.sys_id);
			change.addQuery("related_record", file.sys_id);
			change.query();

			if(!change.next()){
				change = this._createChange(file);
				change.custom_review = review.sys_id;
				change.update_set = updateSet;
				change.insert();
			}else{
				this._updateChange(file, change);
			}

			return change;
		}catch(exception){
			gs.error("_refreshFindings: " + exception);
			throw exception;
		}
	},
	
	parseRules: function(change){
		try{
			var result = {"error": 0, "recommendation": 0};
			var findings = 0;
			var record = change.related_record;
			var rule = new GlideRecordSecure(this.scope + "_rule");
			
			rule.addQuery("table", record.sys_class_name);
			rule.addQuery("active", true);
			rule.query();
			
			while(rule.next()){
				var finding = null;
				var evaluator = new GlideScopedEvaluator();
				evaluator.putVariable('current', record);
				evaluator.putVariable('answer', false);
				evaluator.evaluateScript(rule, "script", null);
				var answer = evaluator.getVariable('answer');
				
				if(answer){
					gs.info("Create finding for change " + change.number);
					finding = this._createFinding(change, rule);
				}else{
					finding = this._closeFinding(change, rule);
				}
				
				if(finding != null){
					result[finding.type] += 1;
				}
			}
			
			this.result.data = result;
			this.result.success = true;
			return new global.JSON().encode(this.result);
		}catch(exception){
			this.result.message = "An unexpected error occured. Please try again";
			gs.error("parseRules: " + exception);
			return new global.JSON().encode(this.result);
		}
	},
	
	_createFinding: function(record, rule){
		try{
			var finding = new GlideRecord(this.scope + "_finding");
			finding.addQuery("rule", rule.sys_id);
			finding.addQuery("change", record.sys_id);
			finding.query();
			
			if(finding.next()){
				finding.status = "new";
				finding.update();
				return finding;
			}
			
			finding.newRecord();
			finding.type = rule.type;
			finding.message = rule.message;
			finding.rule = rule.sys_id;
			finding.custom_review = record.custom_review;
			finding.change = record.sys_id;
			finding.insert();
			
			return finding;
		}catch(exception){
			gs.error("_createFinding: " + exception);
			throw exception;
		}
	},
	
	_closeFinding: function(record, rule){
		try{			
			var finding = new GlideRecord(this.scope + "_finding");
			finding.addQuery("rule", rule.sys_id);
			finding.addQuery("change", record.sys_id);
			finding.query();

			if(!finding.next()){
				return null;
			}
			
			finding.status = "fixed";
			finding.update();	
			
			return finding;
		}catch(exception){
			gs.error("_closeFinding: " + exception);
			throw exception;
		}
	},
	
	_createChange: function(relatedRecord){
		try{
			var change = new GlideRecord(this.scope + "_change");
			change.newRecord();
			change.table = relatedRecord.sys_class_name;
			change.related_record = relatedRecord.sys_id;
			change.application = relatedRecord.sys_scope.name;
			change = this._mapChangeWithRecord(change, relatedRecord);
			return change;
		}catch(exception){
			gs.error("_createChange: " + exception);
			throw exception;
		}
	},
	
	_updateChange: function(relatedRecord, change){
		try{
			change = this._mapChangeWithRecord(change, relatedRecord);
			change.sys_updated_on = relatedRecord.sys_updated_on;
			change.update();
			return 1;
		}catch(exception){
			gs.error("_updateChange: " + exception);
			throw exception;
		}
	},
	
	_mapChangeWithRecord: function(change, record){
		try{
			var script = "";
			if(record.sys_class_name == "sys_script_client"){
				change.client_script = record.getValue("script");
			}

			if(record.sys_class_name == "sys_script_include"){
				change.server_script = record.getValue("script");
			}
			
			if(record.sys_class_name == "sysevent_in_email_action"){
				change.server_script = record.getValue("script");
			}

			if(record.sys_class_name == "sys_script"){
				change.server_script = record.getValue("script");
			}
			
			if(record.sys_class_name == "sys_ui_page"){
				change.html = record.getValue("xml");
			}
			
			if(record.sys_class_name == "sys_script_email"){
				change.server_script = record.getValue("script");
			}

			if(record.sys_class_name == "catalog_script_client"){
				change.server_script = record.getValue("script");
			}
			
			if(record.sys_class_name == "sys_security_acl"){
				change.server_script = record.getValue("script");
			}
			
			if(record.sys_class_name == "sys_transform_script"){
				change.server_script = record.getValue("script");
			}
			
			if(record.sys_class_name == "sys_ui_page"){
				change.html = record.getValue("html");
				change.client_script = record.getValue("client_script");
				change.server_script = record.getValue("processing_script");
			}
			
			if(change.client_script == "" && change.server_script == ""){
				if(change.isValidField("script")){
					change.server_side = record.getValue("script");
				}
			}
			
			return change;
		}catch(exception){
			gs.error("_mapChangeWithRecord: " + exception);
			throw exception;
		}
	},

	_getChanges: function(updateSet){
		try{
			var update = new GlideRecord("sys_update_xml");
			var encodedQuery = "update_set=" + updateSet.sys_id;
			encodedQuery += "^action=INSERT_OR_UPDATE";
			
			update.addEncodedQuery(encodedQuery);
			update.orderBy("name");
			update.query();
			
			return update;
		}catch(exception){
			gs.error("_getChanges: " + exception);
			throw exception;
		}
	},
	
	_getUpdateSets: function(application){
		try{
			if(application == undefined){
				throw "Please provide an application";
			}
			gs.error("Application is " + application);
			var updateSets = new GlideRecord("sys_update_set");
			updateSets.addQuery("application", application);
			updateSets.query();
			
			return updateSets;
		}catch(exception){
			gs.error("_getUpdateSets: " + exception);
			throw exception;
		}
	},
			
	_getRelatedRecord: function(updateName){
		try{
			var file = new GlideRecord("sys_metadata");
			file.addQuery("sys_update_name", updateName.toString());
			file.query();
			
			if(!file.next()) {
				return null;
			}
			
			var relatedRecord = new GlideRecord(file.sys_class_name);
			relatedRecord.get(file.sys_id);
			return relatedRecord;
		}catch(exception){
			gs.error("_getRelatedRecord: " + exception);
			return null;
		}
	},
	
    type: 'CodeReviewUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>paul.galmot</sys_created_by>
        <sys_created_on>2016-12-12 12:03:36</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5f62809b4f6fe2003fb88e401310c71f</sys_id>
        <sys_mod_count>312</sys_mod_count>
        <sys_name>CodeReviewUtil</sys_name>
        <sys_package display_value="Code Review" source="x_novrp_cr">1f3fb7474f6fe2003fb88e401310c7e7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Code Review">1f3fb7474f6fe2003fb88e401310c7e7</sys_scope>
        <sys_update_name>sys_script_include_5f62809b4f6fe2003fb88e401310c71f</sys_update_name>
        <sys_updated_by>paul.galmot</sys_updated_by>
        <sys_updated_on>2017-05-03 08:54:10</sys_updated_on>
    </sys_script_include>
</record_update>
